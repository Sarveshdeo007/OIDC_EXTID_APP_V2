@model OIDCDemoApp.Models.UserProfile
@{
    ViewData["Title"] = "Profile";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>User Profile</h2>

        <a href="/Home/SignOut" class="btn btn-danger">Sign Out</a>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <dl class="row">
                        <dt class="col-sm-4">Name</dt>
                        <dd class="col-sm-8 @(Model.UpdatedFields?.Contains("Name") == true ? "text-success fw-bold" : "")">
                            @Model.Name
                            @if (Model.UpdatedFields?.Contains("Name") == true)
                            {
                                <span class="badge bg-success ms-2">Updated</span>
                            }
                        </dd>

                        <dt class="col-sm-4">Given Name</dt>
                        <dd class="col-sm-8 @(Model.UpdatedFields?.Contains("GivenName") == true ? "text-success fw-bold" : "")">
                            @Model.GivenName
                            @if (Model.UpdatedFields?.Contains("GivenName") == true)
                            {
                                <span class="badge bg-success ms-2">Updated</span>
                            }
                        </dd>

                        <dt class="col-sm-4">Surname</dt>
                        <dd class="col-sm-8 @(Model.UpdatedFields?.Contains("Surname") == true ? "text-success fw-bold" : "")">
                            @Model.Surname
                            @if (Model.UpdatedFields?.Contains("Surname") == true)
                            {
                                <span class="badge bg-success ms-2">Updated</span>
                            }
                        </dd>

                        <dt class="col-sm-4">Email</dt>
                        <dd class="col-sm-8">@Model.Email</dd>
                    </dl>
                </div>
                <div class="col-md-6">
                    <dl class="row">
                        <dt class="col-sm-4">Street Address</dt>
                        <dd class="col-sm-8 @(Model.UpdatedFields?.Contains("StreetAddress") == true ? "text-success fw-bold" : "")">
                            @(string.IsNullOrEmpty(Model.StreetAddress) ? "Not set" : Model.StreetAddress)
                            @if (Model.UpdatedFields?.Contains("StreetAddress") == true)
                            {
                                <span class="badge bg-success ms-2">Updated</span>
                            }
                        </dd>

                        <dt class="col-sm-4">City</dt>
                        <dd class="col-sm-8 @(Model.UpdatedFields?.Contains("City") == true ? "text-success fw-bold" : "")">
                            @(string.IsNullOrEmpty(Model.City) ? "Not set" : Model.City)
                            @if (Model.UpdatedFields?.Contains("City") == true)
                            {
                                <span class="badge bg-success ms-2">Updated</span>
                            }
                        </dd>

                        <dt class="col-sm-4">State/Province</dt>
                        <dd class="col-sm-8 @(Model.UpdatedFields?.Contains("StateProvince") == true ? "text-success fw-bold" : "")">
                            @(string.IsNullOrEmpty(Model.StateProvince) ? "Not set" : Model.StateProvince)
                            @if (Model.UpdatedFields?.Contains("StateProvince") == true)
                            {
                                <span class="badge bg-success ms-2">Updated</span>
                            }
                        </dd>

                        <dt class="col-sm-4">Country/Region</dt>
                        <dd class="col-sm-8 @(Model.UpdatedFields?.Contains("CountryOrRegion") == true ? "text-success fw-bold" : "")">
                            @(string.IsNullOrEmpty(Model.CountryOrRegion) ? "Not set" : Model.CountryOrRegion)
                            @if (Model.UpdatedFields?.Contains("CountryOrRegion") == true)
                            {
                                <span class="badge bg-success ms-2">Updated</span>
                            }
                        </dd>
                    </dl>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-3">
        <a asp-action="EditProfile" class="btn btn-primary">Edit Profile</a>
        <button type="button" class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#resetPasswordModal">
            Reset Password
        </button>
        <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteProfileModal">
            Delete Profile
        </button>
    </div>
</div>

<!-- Reset Password Modal -->
<div class="modal fade" id="resetPasswordModal" tabindex="-1" aria-labelledby="resetPasswordModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="resetPasswordModalLabel">Reset Password</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-controller="Home" asp-action="ResetPassword" method="post" id="resetPasswordForm">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i> Please enter your current password and then your new password.
                    </div>
                    
                    <div class="mb-3">
                        <label for="CurrentPassword" class="form-label">Current Password</label>
                        <input type="password" class="form-control" id="CurrentPassword" name="CurrentPassword" required>
                        <div class="invalid-feedback" id="currentPasswordFeedback">
                            Please enter your current password.
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="NewPassword" class="form-label">New Password</label>
                        <input type="password" class="form-control" id="NewPassword" name="NewPassword" required>
                        <div class="form-text">
                            Password must be at least 8 characters long and contain:
                            <ul>
                                <li>Uppercase letters (A-Z)</li>
                                <li>Lowercase letters (a-z)</li>
                                <li>Numbers (0-9)</li>
                                <li>Special characters (any non-alphanumeric character)</li>
                            </ul>
                        </div>
                        <div class="invalid-feedback" id="newPasswordFeedback">
                            Password does not meet requirements.
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="ConfirmPassword" class="form-label">Confirm New Password</label>
                        <input type="password" class="form-control" id="ConfirmPassword" name="ConfirmPassword" required>
                        <div class="invalid-feedback" id="confirmPasswordFeedback">
                            Passwords do not match.
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-warning" id="resetPasswordButton">Reset Password</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Profile Modal -->
<div class="modal fade" id="deleteProfileModal" tabindex="-1" aria-labelledby="deleteProfileModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteProfileModalLabel">Confirm Profile Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-danger">
                    <h5 class="alert-heading">Warning!</h5>
                    <p>This action cannot be undone. Are you sure you want to delete your profile?</p>
                    <hr>
                    <p class="mb-0">This will permanently delete your account and all associated data.</p>
                </div>
                <div class="alert alert-info">
                    <h5 class="alert-heading">Before you proceed:</h5>
                    <ul>
                        <li>Make sure you have backed up any important data</li>
                        <li>You will be immediately signed out after deletion</li>
                        <li>You will need to create a new account if you want to use the service again</li>
                    </ul>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form asp-action="DeleteProfile" method="post" style="display: inline;">
                    <input type="hidden" name="__RequestVerificationToken" value="@Html.AntiForgeryToken()" />
                    <button type="submit" class="btn btn-danger">Yes, Delete My Profile</button>
                </form>
            </div>
        </div>
    </div>
</div>

<style>
    .row {
        margin-bottom: 1rem;
    }
    dt {
        font-weight: 600;
        color: #666;
    }
    dd {
        margin-bottom: 0.5rem;
    }
    .btn-danger {
        margin-left: 10px;
    }
    .btn-warning {
        margin-left: 10px;
    }
    .form-text ul {
        margin-bottom: 0;
        padding-left: 1.2rem;
    }
</style>

@section Scripts {
    <script src="~/js/password-validation.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('resetPasswordForm');
            const currentPasswordInput = document.getElementById('CurrentPassword');
            const newPasswordInput = document.getElementById('NewPassword');
            const confirmPasswordInput = document.getElementById('ConfirmPassword');
            const resetButton = document.getElementById('resetPasswordButton');
            const modal = document.getElementById('resetPasswordModal');

            function validateForm() {
                const isCurrentPasswordValid = currentPasswordInput.value.length > 0;
                const isNewPasswordValid = validatePassword(newPasswordInput.value);
                const isConfirmPasswordValid = newPasswordInput.value === confirmPasswordInput.value;

                currentPasswordInput.classList.toggle('is-invalid', !isCurrentPasswordValid);
                newPasswordInput.classList.toggle('is-invalid', !isNewPasswordValid);
                confirmPasswordInput.classList.toggle('is-invalid', !isConfirmPasswordValid);

                resetButton.disabled = !(isCurrentPasswordValid && isNewPasswordValid && isConfirmPasswordValid);
                
                return isCurrentPasswordValid && isNewPasswordValid && isConfirmPasswordValid;
            }

            // Add input event listeners
            currentPasswordInput.addEventListener('input', validateForm);
            newPasswordInput.addEventListener('input', validateForm);
            confirmPasswordInput.addEventListener('input', validateForm);

            // Handle form submission
            form.addEventListener('submit', function(event) {
                if (!validateForm()) {
                    event.preventDefault();
                    return false;
                }
                return true;
            });

            // Clear form when modal is closed
            modal.addEventListener('hidden.bs.modal', function () {
                form.reset();
                currentPasswordInput.classList.remove('is-invalid');
                newPasswordInput.classList.remove('is-invalid');
                confirmPasswordInput.classList.remove('is-invalid');
                resetButton.disabled = true;
            });
        });
    </script>
} 